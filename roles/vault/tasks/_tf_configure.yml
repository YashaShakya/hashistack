---
- name: Reload workspace vars
  include_vars:
    dir: "{{ hs_vault_local_secret_dir }}"
    ignore_unknown_extensions: true

- name: Debug
  debug:
    msg: "Load balancer url checked from localhost: {{ hs_vault_external_url }}"
    verbosity: 1

- name: Wait for load balancer warm up
  uri:
    url: "{{ hs_vault_external_url }}/v1/auth/token/lookup-self"
    headers:
      X-Vault-Token: "{{ vault_init_content.root_token }}"
    ca_path: "{{ hs_vault_use_custom_ca | ternary(hs_vault_local_ca_cert, '') | default(omit, true) }}"
  register: _vault_ping_api
  until: _vault_ping_api.status == 200
  retries: 30
  delay: 10
  delegate_to: localhost
  become: false
  when:
    - __hs_vault_is_first_master

- name: Copy terraform sources    # noqa risky-file-permissions
  copy:
    src: "{{ role_path }}/files/terraform/"
    dest: "{{ __hs_vault_terraform_module_work_dir }}/"
  delegate_to: localhost
  become: false
  run_once: true

- name: Render backend configuration file
  template:
    src: "tf_backend_{{ hs_vault_terraform_backend_type }}.tf.j2"
    dest: "{{ __hs_vault_terraform_module_work_dir }}/backend.tf"
    mode: 0644
  when:
    - hs_vault_terraform_backend_type is defined
    - (hs_vault_terraform_backend_type | length) > 0
    - hs_vault_terraform_backend_type in ['s3']

- name: "Do Terraform"
  cloud.terraform.terraform:
    project_path: "{{ __hs_vault_terraform_module_work_dir }}"
    state: "present"    # noqa args
    force_init: true
    backend_config: "{{ hs_vault_terraform_backend_config }}"
    init_reconfigure: true
    provider_upgrade: "{{ hs_tf_provider_upgrade | default(true) }}"
    workspace: "{{ hs_vault_cluster_name }}"
    variables:
      vault_address: >-
        {{ hs_vault_external_url }}
      vault_ca_cert_file: >-
        {{ hs_vault_use_custom_ca | ternary(hs_vault_local_ca_cert, '') | default(omit, true) }}
  environment:
    VAULT_ADDR: "{{ hs_vault_external_url }}"
    VAULT_TOKEN: "{{ vault_init_content.root_token }}"
    TF_CLI_ARGS: ""
    TF_CLI_ARGS_init: ""
    TF_CLI_ARGS_plan: ""
    TF_CLI_ARGS_apply: ""
    TF_CLI_ARGS_destroy: ""
  register: tf_result
  delegate_to: localhost
  throttle: 1
  become: false
  when:
    - __hs_vault_is_first_master

- name: Cook variables
  set_fact:
    _tf_vault_outputs:
      hs_consul_connect_token: "{{ tf_result.outputs.consul_connect_client_token.value }}"
      hs_consul_connect_root_pki_path: "{{ tf_result.outputs.root_pki_path.value }}"
      hs_consul_connect_intermediate_pki_path: "{{ tf_result.outputs.inter_pki_path.value }}"
      hs_consul_connect_root_pki_certificate_b64: "{{ tf_result.outputs.root_certificate.value | b64encode }}"
      hs_telemetry_vault_token: "{{ tf_result.outputs.telemetry_token.value }}"
      hs_nomad_vault_token: "{{ tf_result.outputs.nomad_vault_token.value }}"
  delegate_to: localhost
  become: false
  when:
    - __hs_vault_is_first_master

- name: Generate host_vars for public_ns
  copy:
    dest: "{{ hs_vault_local_secret_dir }}/tf_vault_config.yml"
    content: |-
      ---
      {{ _tf_vault_outputs | to_nice_yaml(indent=2) }}
    mode: 0600
  delegate_to: localhost
  become: false
  when:
    - __hs_vault_is_first_master
